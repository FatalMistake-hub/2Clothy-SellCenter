{"version":3,"sources":["components/Cards/InfoCard.js","components/Chart/ChartCard.js","components/Chart/ChartLegend.js","components/RoundIcon.js","utils/demo/chartsData.js","pages/Dashboard/Dashboard.js","components/Typography/PageTitle.js","components/ProductIcon.js","components/OrdersTable.js"],"names":["InfoCard","title","value","icon","children","className","Chart","ChartLegend","legends","map","legend","i","key","color","RoundIcon","Icon","iconColorClass","bgColorClass","cls","classNames","doughnutLegends","lineLegends","doughnutOptions","data","datasets","backgroundColor","label","labels","options","responsive","cutoutPercentage","display","lineOptions","borderColor","fill","tooltips","mode","intersect","hover","scales","x","scaleLabel","labelString","y","Dashboard","PeopleIcon","MoneyIcon","CartIcon","ChatIcon","ChartCard","PageTitle","OrdersTable","resultsPerPage","ProductIcon","src","alt","size","loading","filter","path","useState","page","setPage","setData","response","setResponse","dispatch","useDispatch","user","useSelector","authRemainingSelector","currentUser","login","accessToken","useEffect","a","axiosJWT","createInstance","AuthSlice","actions","loginSuccess","apiAuthService","result","fetchApi","slice","order","statusId","handleOrder","purchaseId","status","StatusId","id","orderDetails","itemImg","itemName","quantity","reduce","total","price","toLocaleString","type","statusName","moment","dateCreated","format","to","aria-label","onClick","handleStatus","splice","length","totalResults","onChange","p"],"mappings":"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","file":"static/js/10.57018b07.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardBody } from '@windmill/react-ui'\r\n\r\nfunction InfoCard({ title, value, children: icon }) {\r\n  return (\r\n    <Card>\r\n      <CardBody className=\"flex items-center\">\r\n        {icon}\r\n        <div>\r\n          <p className=\"mb-2 text-sm font-medium text-gray-600 dark:text-gray-400\">{title}</p>\r\n          <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-200\">{value}</p>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default InfoCard\r\n","import React from 'react';\r\n\r\nfunction Chart({ children, title }) {\r\n    return (\r\n        <div className=\"w-min h-full flex items-center flex-col p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800\" >\r\n            <p className=\"mb-4 font-semibold text-gray-800 dark:text-gray-300\">{title}</p>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;\r\n","import React from 'react'\r\n\r\nfunction ChartLegend({ legends }) {\r\n  return (\r\n    <div className=\"flex justify-center mt-4 space-x-3 text-sm text-gray-600 dark:text-gray-400\">\r\n      {legends?.map((legend,i) => (\r\n        <div className=\"flex items-center\" key={i}>\r\n          <span className={`inline-block w-3 h-3 mr-1 ${legend.color} rounded-full`}></span>\r\n          <span>{legend.title}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChartLegend\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nfunction RoundIcon({\r\n  icon: Icon,\r\n  iconColorClass = \"text-orange-600 dark:text-orange-100\",\r\n  bgColorClass = \"bg-orange-100 dark:bg-orange-600\",\r\n  className,\r\n}) {\r\n  const baseStyle = \"p-3 rounded-md\";\r\n\r\n  const cls = classNames(baseStyle, iconColorClass, bgColorClass, className);\r\n  return (\r\n    <div className={cls}>\r\n      <Icon className=\"w-5 h-5\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoundIcon;\r\n","export let doughnutLegends = [\r\n    { title: \"Shirts\", color: \"bg-blue-500\" },\r\n    { title: \"Shoes\", color: \"bg-teal-600\" },\r\n    { title: \"Bags\", color: \"bg-orange-600\" },\r\n  ];\r\n  \r\n  export let lineLegends = [\r\n    { title: \"Organic\", color: \"bg-teal-600\" },\r\n    { title: \"Paid\", color: \"bg-orange-600\" },\r\n  ];\r\n  \r\n  export let barLegends = [\r\n    { title: \"Shoes\", color: \"bg-teal-600\" },\r\n    { title: \"Bags\", color: \"bg-orange-600\" },\r\n  ];\r\n  export let realTimeUsersBarLegends = [\r\n    { title: \"Active Users\", color: \"bg-teal-600\" },\r\n  ];\r\n  \r\n  export let doughnutOptions = {\r\n    data: {\r\n      datasets: [\r\n        {\r\n          data: [33, 33, 33],\r\n          /**\r\n           * These colors come from Tailwind CSS palette\r\n           * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\r\n           */\r\n          backgroundColor: [\"#0694a2\", \"#1c64f2\", \"#7e3af2\"],\r\n          label: \"Dataset 1\",\r\n        },\r\n      ],\r\n      labels: [\"Shoes\", \"Shirts\", \"Bags\"],\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      cutoutPercentage: 80,\r\n    },\r\n    legend: {\r\n      display: false,\r\n    },\r\n  };\r\n  \r\n  export let lineOptions = {\r\n    data: {\r\n      labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\r\n      datasets: [\r\n        {\r\n          label: \"Organic\",\r\n          /**\r\n           * These colors come from Tailwind CSS palette\r\n           * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\r\n           */\r\n          backgroundColor: \"#0694a2\",\r\n          borderColor: \"#0694a2\",\r\n          data: [43, 48, 40, 54, 67, 73, 70],\r\n          fill: false,\r\n        },\r\n        {\r\n          label: \"Paid\",\r\n          fill: false,\r\n          /**\r\n           * These colors come from Tailwind CSS palette\r\n           * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\r\n           */\r\n          backgroundColor: \"#7e3af2\",\r\n          borderColor: \"#7e3af2\",\r\n          data: [24, 50, 64, 74, 52, 51, 65],\r\n        },\r\n      ],\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n      },\r\n      hover: {\r\n        mode: \"nearest\",\r\n        intersect: true,\r\n      },\r\n      scales: {\r\n        x: {\r\n          display: true,\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: \"Month\",\r\n          },\r\n        },\r\n        y: {\r\n          display: true,\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: \"Value\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    legend: {\r\n      display: false,\r\n    },\r\n  };\r\n  \r\n  export let barOptions = {\r\n    data: {\r\n      labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\r\n      datasets: [\r\n        {\r\n          label: \"Shoes\",\r\n          backgroundColor: \"#0694a2\",\r\n          // borderColor: window.chartColors.red,\r\n          borderWidth: 1,\r\n          data: [-3, 14, 52, 74, 33, 90, 70],\r\n        },\r\n        {\r\n          label: \"Bags\",\r\n          backgroundColor: \"#7e3af2\",\r\n          // borderColor: window.chartColors.blue,\r\n          borderWidth: 1,\r\n          data: [66, 33, 43, 12, 54, 62, 84],\r\n        },\r\n      ],\r\n    },\r\n    options: {\r\n      responsive: true,\r\n    },\r\n    legend: {\r\n      display: false,\r\n    },\r\n  };\r\n  \r\n  export let realTimeUsersBarOptions = {\r\n    data: {\r\n      labels: [\r\n        \"6.00\",\r\n        \"6.10\",\r\n        \"6.20\",\r\n        \"6.30\",\r\n        \"6.40\",\r\n        \"6.50\",\r\n        \"7.00\",\r\n        \"7.10\",\r\n        \"7.20\",\r\n        \"7.30\",\r\n        \"7.40\",\r\n        \"7.50\",\r\n        \"Now\",\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: \"Active Users\",\r\n          backgroundColor: \"#0694a2\",\r\n          // borderColor: window.chartColors.red,\r\n          borderWidth: 1,\r\n          data: [2, 14, 52, 74, 33, 90, 70, 34, 56, 62, 11, 23, 55],\r\n        },\r\n      ],\r\n    },\r\n    options: {\r\n      responsive: true,\r\n    },\r\n    legend: {\r\n      display: false,\r\n    },\r\n  };","import React from 'react';\r\n\r\nimport InfoCard from '../../components/Cards/InfoCard';\r\nimport ChartCard from '../../components/Chart/ChartCard';\r\nimport { Doughnut, Line } from 'react-chartjs-2';\r\nimport ChartLegend from '../../components/Chart/ChartLegend';\r\nimport PageTitle from '../../components/Typography/PageTitle';\r\nimport { ChatIcon, CartIcon, MoneyIcon, PeopleIcon } from '../../icons';\r\nimport RoundIcon from '../../components/RoundIcon';\r\nimport { Card, CardBody, Label, Select } from '@windmill/react-ui';\r\n\r\nimport { doughnutOptions, lineOptions, doughnutLegends, lineLegends } from '../../utils/demo/chartsData';\r\nimport OrdersTable from '../../components/OrdersTable';\r\n\r\nfunction Dashboard() {\r\n    return (\r\n        <>\r\n            {/* <CTA /> */}\r\n            <div className=\"my-8\">\r\n                <Card>\r\n                    <CardBody className=\"p-8\">\r\n                        <div className=\" flex flex-col\">\r\n                            <h2 className=\"mb-2 text-2xl font-semibold text-gray-700 dark:text-gray-200\">Danh sách cần làm</h2>\r\n\r\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Những việc bạn sẽ phải làm</p>\r\n\r\n                            <Label className=\"mx-3\"></Label>\r\n                        </div>\r\n                        <div className=\"my-6 grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4\">\r\n                            <InfoCard title=\"Tổng số khách hàng\" value=\"765\">\r\n                                <RoundIcon\r\n                                    icon={PeopleIcon}\r\n                                    iconColorClass=\"text-orange-500 dark:text-orange-100\"\r\n                                    bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\r\n                                    className=\"mr-4\"\r\n                                />\r\n                            </InfoCard>\r\n                            <InfoCard title=\"Tổng số khách hàng\" value=\"765\">\r\n                                <RoundIcon\r\n                                    icon={PeopleIcon}\r\n                                    iconColorClass=\"text-orange-500 dark:text-orange-100\"\r\n                                    bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\r\n                                    className=\"mr-4\"\r\n                                />\r\n                            </InfoCard>\r\n                            <InfoCard title=\"Tổng số khách hàng\" value=\"765\">\r\n                                <RoundIcon\r\n                                    icon={PeopleIcon}\r\n                                    iconColorClass=\"text-orange-500 dark:text-orange-100\"\r\n                                    bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\r\n                                    className=\"mr-4\"\r\n                                />\r\n                            </InfoCard>\r\n                            <InfoCard title=\"Tổng số khách hàng\" value=\"765\">\r\n                                <RoundIcon\r\n                                    icon={PeopleIcon}\r\n                                    iconColorClass=\"text-orange-500 dark:text-orange-100\"\r\n                                    bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\r\n                                    className=\"mr-4\"\r\n                                />\r\n                            </InfoCard>\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n            {/* <!-- Cards --> */}\r\n            <Card>\r\n                <CardBody className=\"p-8\">\r\n                    <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4\">\r\n                        <InfoCard title=\"Tổng số khách hàng\" value=\"765\">\r\n                            <RoundIcon\r\n                                icon={PeopleIcon}\r\n                                iconColorClass=\"text-orange-500 dark:text-orange-100\"\r\n                                bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\r\n                                className=\"mr-4\"\r\n                            />\r\n                        </InfoCard>\r\n\r\n                        <InfoCard title=\"Tổng doanh thu\" value=\"$ 6,760.89\">\r\n                            <RoundIcon\r\n                                icon={MoneyIcon}\r\n                                iconColorClass=\"text-green-500 dark:text-green-100\"\r\n                                bgColorClass=\"bg-green-100 dark:bg-green-500\"\r\n                                className=\"mr-4\"\r\n                            />\r\n                        </InfoCard>\r\n\r\n                        <InfoCard title=\"Đơn hàng mới\" value=\"150\">\r\n                            <RoundIcon\r\n                                icon={CartIcon}\r\n                                iconColorClass=\"text-blue-500 dark:text-blue-100\"\r\n                                bgColorClass=\"bg-blue-100 dark:bg-blue-500\"\r\n                                className=\"mr-4\"\r\n                            />\r\n                        </InfoCard>\r\n\r\n                        <InfoCard title=\"Unread Chats\" value=\"15\">\r\n                            <RoundIcon\r\n                                icon={ChatIcon}\r\n                                iconColorClass=\"text-teal-500 dark:text-teal-100\"\r\n                                bgColorClass=\"bg-teal-100 dark:bg-teal-500\"\r\n                                className=\"mr-4\"\r\n                            />\r\n                        </InfoCard>\r\n                    </div>\r\n\r\n                    <div className=\"grid gap-6 mb-8 md:grid-cols-2  \">\r\n                        <ChartCard title=\"User Analytics\">\r\n                            <Line {...lineOptions} />\r\n                            <ChartLegend legends={lineLegends} />\r\n                        </ChartCard>\r\n\r\n                        <ChartCard title=\"Revenue\">\r\n                            <Doughnut {...doughnutOptions} />\r\n                            <ChartLegend legends={doughnutLegends} />\r\n                        </ChartCard>\r\n                    </div>\r\n                </CardBody>\r\n            </Card>\r\n\r\n            <PageTitle>Đơn hàng</PageTitle>\r\n            <OrdersTable resultsPerPage={10} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react'\r\n\r\nfunction PageTitle({ children }) {\r\n  return (\r\n    <h1 className=\"my-4 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nfunction ProductIcon({ src, alt ,size='w-20 h-20'}) {\r\n    \r\n    return (\r\n        <>\r\n            <div className={`relative rounded-md inline-block ${size} hidden mr-4 md:block`}>\r\n                <img className=\"object-cover w-full h-full rounded-md\" src={src} alt={alt} loading=\"lazy\" />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProductIcon;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    TableBody,\r\n    TableContainer,\r\n    Table,\r\n    TableHeader,\r\n    TableCell,\r\n    TableRow,\r\n    TableFooter,\r\n    Button,\r\n    Avatar,\r\n    Badge,\r\n    Pagination,\r\n} from '@windmill/react-ui';\r\nimport { EyeIcon } from '../icons';\r\nimport ordersData from '../utils/demo/ordersData';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport ProductIcon from './ProductIcon';\r\nimport * as apiAuthService from '../services/authService';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authRemainingSelector } from '../redux/selector';\r\nimport { createInstance } from '../services/createInstance';\r\nimport moment from 'moment/moment';\r\nimport AuthSlice from '../redux/AuthSlice';\r\nconst OrdersTable = ({ resultsPerPage, filter, path }) => {\r\n    const [page, setPage] = useState(1);\r\n    const [data, setData] = useState([]);\r\n    const [response, setResponse] = useState([]);\r\n    // pagination setup\r\n\r\n    const dispatch = useDispatch();\r\n    const user = useSelector(authRemainingSelector);\r\n    const currentUser = user?.login.currentUser;\r\n    const accessToken = currentUser?.accessToken;\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            let axiosJWT = createInstance(currentUser, dispatch, AuthSlice.actions.loginSuccess);\r\n            const result = await apiAuthService.getShopOrder(accessToken, axiosJWT);\r\n            setResponse(result);\r\n            \r\n        };\r\n        fetchApi();\r\n    }, []);\r\n\r\n    // pagination change control\r\n    function onPageChange(p) {\r\n        setPage(p);\r\n    }\r\n\r\n    // on page change, load new sliced data\r\n    // here you would make another server request for new data\r\n    useEffect(() => {\r\n        if (filter === 'Tất cả' || !filter) {\r\n            setData(response?.slice((page - 1) * resultsPerPage, page * resultsPerPage));\r\n        }\r\n        if (filter === 'Chờ xác nhận') {\r\n            setData(response?.filter((order) => order.statusId === 1).slice((page - 1) * resultsPerPage, page * resultsPerPage));\r\n        }\r\n        if (filter === 'Đang giao') {\r\n            setData(response?.filter((order) => order.statusId === 2).slice((page - 1) * resultsPerPage, page * resultsPerPage));\r\n        }\r\n        if (filter === 'Đã giao') {\r\n            setData(response?.filter((order) => order.statusId === 3).slice((page - 1) * resultsPerPage, page * resultsPerPage));\r\n        }\r\n        if (filter === 'Đã huỷ') {\r\n            setData(response?.filter((order) => order.statusId === 4).slice((page - 1) * resultsPerPage, page * resultsPerPage));\r\n        }\r\n    }, [page, resultsPerPage, filter,response]);\r\n\r\n    const handleStatus = (status, id) => {\r\n        switch (status) {\r\n            case 1:\r\n                return (\r\n                    <>\r\n                        <span\r\n                            onClick={() => handleOrder(id, 2)}\r\n                            className=\"my-2 font-medium cursor-pointer leading-3 text-blue-500 hover:text-blue-700\"\r\n                            aria-label=\"Preview\"\r\n                        >\r\n                            Xác nhận\r\n                        </span>\r\n                        <span\r\n                            onClick={() => handleOrder(id, 4)}\r\n                            className=\"my-2 font-medium cursor-pointer leading-3 text-blue-500 hover:text-blue-700\"\r\n                            aria-label=\"Preview\"\r\n                        >\r\n                            Huỷ\r\n                        </span>\r\n                    </>\r\n                );\r\n            // case 2:\r\n            //     return (\r\n            //         <span\r\n            //             onClick={() => handleOrder(id, 4)}\r\n            //             className=\"my-2 font-medium cursor-pointer leading-3 text-blue-500 hover:text-blue-700\"\r\n            //             aria-label=\"Preview\"\r\n            //         >\r\n            //             Huỷ\r\n            //         </span>\r\n            //     );\r\n            default:\r\n                return '';\r\n        }\r\n    };\r\n    const handleOrder = (purchaseId, status) => {\r\n        const fetchApi = async () => {\r\n            let axiosJWT = createInstance(currentUser, dispatch, AuthSlice.actions.loginSuccess);\r\n            let result;\r\n            if (status == 2) {\r\n                result = await apiAuthService.updateOrder(\r\n                    purchaseId,\r\n                    {\r\n                        StatusId: status,\r\n                    },\r\n                    accessToken,\r\n                    axiosJWT,\r\n                );\r\n                setResponse(result);\r\n                \r\n\r\n                // setFilterPurchases(result);\r\n            } else {\r\n                result = await apiAuthService.cancelOrder(purchaseId, accessToken, axiosJWT);\r\n                setResponse(result);\r\n                \r\n\r\n                // setFilterPurchases(result);\r\n            }\r\n        };\r\n        fetchApi();\r\n    };\r\n    return (\r\n        <div>\r\n            {/* Table */}\r\n            <TableContainer className=\"mb-8\">\r\n                <Table>\r\n                    <TableHeader>\r\n                        <tr>\r\n                            <TableCell>Sản phẩm</TableCell>\r\n                            <TableCell>Số lượng</TableCell>\r\n                            <TableCell>Tổng Đơn hàng</TableCell>\r\n                            <TableCell>Trạng thái </TableCell>\r\n                            <TableCell>Ngày đặt đơn</TableCell>\r\n                            <TableCell>Thao tác</TableCell>\r\n                        </tr>\r\n                    </TableHeader>\r\n                    <TableBody>\r\n                        {data.map((order, i) => (\r\n                            <>\r\n                                <TableRow key={i} className=\"mb-4\">\r\n                                    <TableCell>\r\n                                        {/* <TableHeader> */}\r\n                                        <div className=\"flex flex-end p-4\"> Mã đơn hàng: {order.id} </div>\r\n                                        {/* </TableHeader> */}\r\n                                        <div className=\"flex items-center text-sm\">\r\n                                            <ProductIcon\r\n                                                className=\"hidden mr-3 md:block\"\r\n                                                src={order.orderDetails[0].itemImg}\r\n                                                alt=\"User image\"\r\n                                            />\r\n                                            <div>\r\n                                                <p className=\"font-semibold\">{order.orderDetails[0].itemName}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </TableCell>\r\n\r\n                                    <TableCell>\r\n                                        <span className=\"text-sm\">X {order.orderDetails[0].quantity}</span>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <span className=\"text-sm\">\r\n                                            {order.orderDetails\r\n                                                .reduce(function (total, order) {\r\n                                                    return total + order.price;\r\n                                                }, 0)\r\n                                                .toLocaleString('es-ES')}{' '}\r\n                                            ₫\r\n                                        </span>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <Badge\r\n                                            type={\r\n                                                order.statusId === 4\r\n                                                    ? 'danger'\r\n                                                    : order.statusId === 3\r\n                                                    ? 'success'\r\n                                                    : order.statusId === 1\r\n                                                    ? 'warning'\r\n                                                :\"primary\"\r\n                                            }\r\n                                        >\r\n                                            {order.statusName}\r\n                                        </Badge>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <span className=\"text-sm\">{moment(data.dateCreated).format('L')}</span>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <div className=\"flex flex-col  justify-between\">\r\n                                            <Link to={`/orders/${order.id}`}>\r\n                                                <span\r\n                                                    className=\"my-2 font-medium leading-3 text-blue-500 hover:text-blue-700\"\r\n                                                    aria-label=\"Preview\"\r\n                                                >\r\n                                                    Xem chi tiết\r\n                                                </span>\r\n                                            </Link>\r\n                                            {handleStatus(order.statusId, order.id)}\r\n                                        </div>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                {order.orderDetails.splice(1,order.orderDetails.length).map((orderDetails, i) => (\r\n                                    <TableRow key={i}>\r\n                                        <TableCell>\r\n                                            <div className=\"flex items-center text-sm\">\r\n                                                <ProductIcon className=\"hidden mr-3 md:block\" src={orderDetails.itemImg} alt=\"User image\" />\r\n                                                <div>\r\n                                                    <p className=\"font-semibold\">{orderDetails.itemName}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </TableCell>\r\n                                        <TableCell>X {orderDetails.quantity}</TableCell>\r\n                                        <TableCell>\r\n                                            {/* <span className=\"text-sm\">{orderDetails.price.toLocaleString('es-ES')} ₫</span> */}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {/* <Badge\r\n                                                type={\r\n                                                    orderDetails.status === 'Un-paid'\r\n                                                        ? 'danger'\r\n                                                        : orderDetails.status === 'Paid'\r\n                                                        ? 'success'\r\n                                                        : orderDetails.status === 'Completed'\r\n                                                        ? 'warning'\r\n                                                        : 'neutral'\r\n                                                }\r\n                                            >\r\n                                                {orderDetails.status}\r\n                                            </Badge> */}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {/* <span className=\"text-sm\">{moment(data.dateCreated).format('MMMM Do YYYY')}</span> */}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {/* <div className=\"flex flex-col  justify-between\">\r\n                                                <Link to={`/ordersDetail`}>\r\n                                                    <span\r\n                                                        className=\"my-2 font-medium leading-3 text-blue-500 hover:text-blue-700\"\r\n                                                        aria-label=\"Preview\"\r\n                                                    >\r\n                                                        Xem chi tiết\r\n                                                    </span>\r\n                                                </Link>\r\n                                                {handleStatus(data.statusId)}\r\n                                                <span icon={EyeIcon} className=\"my-2\" aria-label=\"Preview\">Đang giao</span>\r\n                                            </div> */}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </>\r\n                        ))}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <Pagination\r\n                            totalResults={response?.length}\r\n                            resultsPerPage={resultsPerPage}\r\n                            label=\"Table navigation\"\r\n                            onChange={onPageChange}\r\n                        />\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrdersTable;\r\n"],"sourceRoot":""}